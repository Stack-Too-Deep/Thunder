"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AnonAadhaarProof: () => AnonAadhaarProof,
  AnonAadhaarProvider: () => AnonAadhaarProvider,
  LogInWithAnonAadhaar: () => LogInWithAnonAadhaar,
  useAnonAadhaar: () => useAnonAadhaar
});
module.exports = __toCommonJS(src_exports);

// src/hooks/useAnonAadhaar.ts
var import_react = require("react");
function useAnonAadhaar() {
  const val = (0, import_react.useContext)(AnonAadhaarContext);
  return [val.state, val.startReq];
}
var AnonAadhaarContext = (0, import_react.createContext)({
  state: { status: "logged-out" },
  startReq: () => {
  },
  appId: "",
  testing: true
});

// src/provider/AnonAadhaarProvider.tsx
var import_react2 = require("react");
var import_anon_aadhaar_pcd2 = require("anon-aadhaar-pcd");
var import_react3 = __toESM(require("react"));

// src/prove.ts
var import_anon_aadhaar_pcd = require("anon-aadhaar-pcd");
var proveAndSerialize = async (pcdArgs, isWeb) => {
  const pcdInitArgs = {
    wasmURL: isWeb ? import_anon_aadhaar_pcd.WASM_URL : "/main.wasm",
    zkeyURL: isWeb ? import_anon_aadhaar_pcd.ZKEY_URL : "/circuit_final.zkey",
    vkeyURL: isWeb ? import_anon_aadhaar_pcd.VK_URL : "/verification_key.json",
    isWebEnv: isWeb
  };
  await (0, import_anon_aadhaar_pcd.init)(pcdInitArgs);
  const pcd = await (0, import_anon_aadhaar_pcd.prove)(pcdArgs);
  const serialized = await (0, import_anon_aadhaar_pcd.serialize)(pcd);
  return { pcd, serialized };
};

// src/provider/AnonAadhaarProvider.tsx
var import_jsx_runtime = require("react/jsx-runtime");
function AnonAadhaarProvider(props) {
  const [pcdStr, setPcdStr] = (0, import_react2.useState)(
    null
  );
  const [pcd, setPcd] = (0, import_react2.useState)(null);
  const [appId, setAppId] = (0, import_react2.useState)(null);
  const [testing, setTesting] = (0, import_react2.useState)(true);
  const [isWeb, setIsWeb] = (0, import_react2.useState)(true);
  const [state, setState] = (0, import_react2.useState)({
    status: "logged-out"
  });
  (0, import_react2.useEffect)(() => {
    if (props._appId === "")
      console.warn("[ANON-AADHAAR]: Please provide a valid appId");
    readFromLocalStorage().then(setAndWriteState);
    setAppId(props._appId);
    if (props._testing !== void 0)
      setTesting(props._testing);
    if (props._isWeb !== void 0)
      setIsWeb(props._isWeb);
  }, [props._appId]);
  const setAndWriteState = (newState) => {
    console.log(`[ANON-AADHAAR] new state ${shallowToString(newState)}`);
    setState(newState);
    writeToLocalStorage(newState);
  };
  const startReq = import_react3.default.useCallback(
    (request) => {
      console.log(`[ANON-AADHAAR] startReq ${shallowToString(request)}`);
      setAndWriteState(handleLoginReq(request, setPcdStr, setPcd, isWeb));
    },
    [setAndWriteState, setPcdStr, setPcd, isWeb]
  );
  import_react3.default.useEffect(() => {
    if (pcdStr === null || pcd === null)
      return;
    console.log(`[ANON-AADHAAR] trying to log in with ${pcdStr}`);
    handleLogin(state, pcdStr, pcd, isWeb).then((newState) => {
      if (newState)
        setAndWriteState(newState);
      else
        console.log(`[ANON-AADHAAR] ${state.status}, ignoring pcd: ${pcdStr}`);
    }).catch((e) => {
      setAndWriteState({ status: "logged-out" });
      console.error(e);
      console.error(
        `[ANON-AADHAAR] error logging in, ignoring pcd: ${pcdStr}`
      );
    });
  }, [pcdStr]);
  const val = import_react3.default.useMemo(
    () => ({ state, startReq, appId, testing, isWeb }),
    [state, appId, testing, isWeb]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AnonAadhaarContext.Provider, { value: val, children: props.children });
}
async function readFromLocalStorage() {
  const json = window.localStorage["anonAadhaar"];
  try {
    const state = await parseAndValidate(json);
    console.log(`[ANON-AADHAAR] read stored state: ${shallowToString(state)}`);
    return state;
  } catch (e) {
    console.error(`[ANON-AADHAAR] error parsing stored state: ${e}`);
    return { status: "logged-out" };
  }
}
function writeToLocalStorage(state) {
  console.log(`[ANON-AADHAAR] writing to local storage, status ${state.status}`);
  window.localStorage["anonAadhaar"] = serialize2(state);
}
function serialize2(state) {
  const { status } = state;
  let serState;
  if (status === "logged-in") {
    serState = {
      status,
      serializedPCD: state.serializedPCD,
      pcd: state.pcd
    };
  } else {
    serState = {
      status: "logged-out"
    };
  }
  return JSON.stringify(serState);
}
async function parseAndValidate(json) {
  if (json == null || json.trim() === "") {
    return { status: "logged-out" };
  }
  const stored = JSON.parse(json);
  if (!["logged-out", "logged-in"].includes(stored.status)) {
    throw new Error(`Invalid status ${stored.status}`);
  }
  if (stored.status === "logged-out") {
    return { status: stored.status };
  }
  const { status, serializedPCD, pcd } = stored;
  if (serializedPCD == null) {
    throw new Error(`Missing serialized PCD`);
  } else if (pcd == null) {
    throw new Error(`Missing PCD`);
  } else if (serializedPCD.type !== import_anon_aadhaar_pcd2.AnonAadhaarPCDPackage.name) {
    throw new Error(`Invalid PCD type ${serializedPCD.type}`);
  }
  return {
    status,
    pcd: await import_anon_aadhaar_pcd2.AnonAadhaarPCDPackage.deserialize(serializedPCD.pcd),
    serializedPCD
  };
}
function shallowToString(obj) {
  return JSON.stringify(obj, function(key, val) {
    if (key === "")
      return val;
    if (val == null)
      return null;
    if (typeof val === "bigint")
      return "" + val;
    if (Array.isArray(val))
      return "<array>";
    if (typeof val === "object")
      return "<object>";
    return val;
  });
}
function handleLoginReq(request, setPcdStr, setPcd, isWeb) {
  const { type } = request;
  switch (type) {
    case "login":
      try {
        const { args } = request;
        proveAndSerialize(args, isWeb).then(
          ({
            pcd,
            serialized
          }) => {
            if (typeof setPcdStr === "function") {
              setPcdStr(serialized);
            }
            if (typeof setPcd === "function") {
              setPcd(pcd);
            }
          }
        );
      } catch (error) {
        console.log(error);
      }
      return { status: "logging-in" };
    case "logout":
      return { status: "logged-out" };
    default:
      throw new Error(`Invalid request type ${type}`);
  }
}
async function handleLogin(state, pcdStr, _pcd, isWeb) {
  if (state.status !== "logging-in") {
    console.log(
      `[ANON-AADHAAR] ignoring message. State != logging-in: ${state}`
    );
    return null;
  }
  if (isWeb) {
    if (!await import_anon_aadhaar_pcd2.AnonAadhaarPCDPackage.verify(_pcd)) {
      throw new Error("Invalid proof");
    }
  } else {
    if (!await (0, import_anon_aadhaar_pcd2.verifyLocal)(_pcd)) {
      throw new Error("Invalid proof");
    }
  }
  return {
    status: "logged-in",
    serializedPCD: pcdStr,
    pcd: _pcd
  };
}

// src/components/AnonAadhaarProof.tsx
var import_react4 = require("react");
var import_styled_components = __toESM(require("styled-components"));
var import_jsx_runtime2 = require("react/jsx-runtime");
var Container = import_styled_components.default.div`
  font-family: system-ui, sans-serif;
  border: 1px solid black;
  border-radius: 8px;
  padding: 8px;
  margin-bottom: 8px;
`;
var AnonAadhaarProof = ({
  code,
  label
}) => {
  const [collapsed, setCollapsed] = (0, import_react4.useState)(true);
  const toggle = (0, import_react4.useCallback)(() => {
    setCollapsed((collapsed2) => !collapsed2);
  }, []);
  let buttonText = collapsed ? "Show proof" : "Hide proof";
  if (label !== void 0) {
    buttonText += " " + label;
  }
  if (collapsed) {
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(RevealProofBtn, { onClick: toggle, children: buttonText });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(RevealProofBtn, { onClick: toggle, children: buttonText }),
    /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(ProofContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("pre", { children: code }) })
  ] });
};
var ProofContainer = import_styled_components.default.div`
  border-radius: 8px;
  border: 1px solid grey;
  overflow-y: scroll;
  max-width: 100%;
  padding: 8px;
`;
var RevealProofBtn = import_styled_components.default.button`
  font-size: 1rem;
  cursor: pointer;
  color: #000000;
  font-weight: bold;
  border-radius: 1.3125rem;
  background: #fff;
  box-shadow: 0px 3px 8px 1px rgba(0, 0, 0, 0.25);
  border: none;
  min-width: 8rem;
  min-height: 2rem;
  border-radius: 0.5rem;
`;

// src/components/LogInWithAnonAadhaar.tsx
var import_react10 = require("react");

// src/components/ProveModal.tsx
var import_react9 = require("react");
var import_styled_components7 = __toESM(require("styled-components"));

// src/components/FileInput.tsx
var import_react5 = require("react");
var import_styled_components2 = __toESM(require("styled-components"));
var import_jsx_runtime3 = require("react/jsx-runtime");
var FileInput = ({
  onChange,
  id
}) => {
  const [fileName, setFileName] = (0, import_react5.useState)("No file selected");
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(InputFile, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(UploadButton, { htmlFor: id, children: "Choose file" }),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      "input",
      {
        type: "file",
        id,
        onChange: (e) => {
          if (!e.target.files)
            return;
          setFileName(e.target.files[0].name);
          onChange(e);
        },
        hidden: true
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(FileName, { id: "file-chosen", children: fileName })
  ] });
};
var FileName = import_styled_components2.default.span`
  margin-left: 5px;
`;
var InputFile = import_styled_components2.default.div`
  display: flex;
  align-items: center;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  max-width: 80%;
  border-radius: 0.5rem;
  border-width: 1px;
  border-color: #d1d5db;
  max-width: 100%;
  font-size: 0.875rem;
  line-height: 1.25rem;
  color: #111827;
  background-color: #f9fafb;
  cursor: pointer;
  margin-top: 0.3rem;
`;
var UploadButton = import_styled_components2.default.label`
  color: #111827;
  background-color: #345c93;
  color: white;
  padding: 0.5rem;
  font-family: sans-serif;
  cursor: pointer;
`;

// src/components/ProveButton.tsx
var import_pcd_types = require("@pcd/pcd-types");
var import_styled_components4 = __toESM(require("styled-components"));
var import_react7 = require("react");

// src/components/LoadingSpinner.tsx
var import_react6 = require("react");
var import_styled_components3 = __toESM(require("styled-components"));
var import_jsx_runtime4 = require("react/jsx-runtime");
var Spinner = () => {
  const emojis = ["\u{1F30E}", "\u{1F30D}", "\u{1F30F}"];
  const [currentEmojiIndex, setCurrentEmojiIndex] = (0, import_react6.useState)(0);
  (0, import_react6.useEffect)(() => {
    const interval = setInterval(() => {
      setCurrentEmojiIndex((prevIndex) => (prevIndex + 1) % emojis.length);
    }, 200);
    return () => clearInterval(interval);
  }, [emojis.length]);
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(SpinnerStyle, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Emoji, { children: emojis[currentEmojiIndex] }) });
};
var SpinnerStyle = import_styled_components3.default.div`
  font-size: 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
`;
var Emoji = import_styled_components3.default.div`
  transition: transform 0.25s ease-in-out;
`;

// src/components/ProveButton.tsx
var import_anon_aadhaar_pcd3 = require("anon-aadhaar-pcd");
var import_jsx_runtime5 = require("react/jsx-runtime");
var ProveButton = ({
  pdfData,
  password,
  provingEnabled,
  setErrorMessage
}) => {
  const [fetchingPublicKey, setFetchingPublicKey] = (0, import_react7.useState)(false);
  const { state, startReq, appId, testing } = (0, import_react7.useContext)(AnonAadhaarContext);
  const startProving = async () => {
    try {
      if (appId === null)
        throw new Error("Missing application Id!");
      const witness = await (0, import_anon_aadhaar_pcd3.extractWitness)(pdfData, password);
      if (witness instanceof Error)
        throw new Error(witness.message);
      let publicKey = "";
      if (!testing) {
        setFetchingPublicKey(true);
        const result = await (0, import_anon_aadhaar_pcd3.fetchPublicKey)(
          "https://www.uidai.gov.in/images/authDoc/uidai_offline_publickey_26022021.cer"
        );
        if (result === null) {
          setFetchingPublicKey(false);
          throw new Error("Error while fetching the public key!");
        } else {
          publicKey = result;
          setFetchingPublicKey(false);
        }
      }
      const args = {
        base_message: {
          argumentType: import_pcd_types.ArgumentTypeName.BigInt,
          userProvided: false,
          value: witness == null ? void 0 : witness.msgBigInt.toString(),
          description: ""
        },
        signature: {
          argumentType: import_pcd_types.ArgumentTypeName.BigInt,
          userProvided: false,
          value: witness == null ? void 0 : witness.sigBigInt.toString(),
          description: ""
        },
        modulus: {
          argumentType: import_pcd_types.ArgumentTypeName.BigInt,
          userProvided: false,
          value: testing ? witness.modulusBigInt.toString() : "0x" + publicKey,
          description: ""
        },
        app_id: {
          argumentType: import_pcd_types.ArgumentTypeName.BigInt,
          userProvided: false,
          value: appId,
          description: ""
        }
      };
      startReq({ type: "login", args });
    } catch (error) {
      console.log(error);
      if (error instanceof Error)
        setErrorMessage(error.message);
    }
  };
  return (() => {
    switch (state.status) {
      case "logged-out":
        return fetchingPublicKey ? /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(Btn, { children: [
          "Loading... ",
          "\u2003",
          /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Spinner, {})
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(Btn, { disabled: !provingEnabled, onClick: startProving, children: [
          " ",
          "Request Aadhaar Proof",
          " "
        ] });
      case "logging-in":
        return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(Btn, { children: [
          "Generating proof...",
          "\u2003",
          /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Spinner, {})
        ] });
    }
  })();
};
var Btn = import_styled_components4.default.button`
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem 1rem;
  font-size: 1rem;
  cursor: pointer;
  color: #f8f8f8;
  font-weight: bold;
  box-shadow: 0px 0.25rem 0.75rem rgba(0, 0, 0, 0.1);
  border: none;
  min-width: 12rem;
  min-height: 3rem;
  border-radius: 0.5rem;
  background: linear-gradient(345deg, #10fe53 0%, #09d3ff 100%);
  margin: 1rem;

  &:hover {
    opacity: 70%;
    background: linear-gradient(345deg, #10fe53 0%, #09d3ff 100%);
  }

  &:active {
    background: #f8f8f8;
  }

  &:disabled {
    color: #a8aaaf;
    background: #e8e8e8;
    cursor: default;
  }
`;

// src/util.ts
var import_buffer = require("buffer");
var extractSignature = (pdf, signaturePosition = 1) => {
  const byteRangePos = getSubstringIndex(pdf, "/ByteRange [", signaturePosition);
  const byteRangeEnd = pdf.indexOf("]", byteRangePos);
  const byteRange = pdf.subarray(byteRangePos, byteRangeEnd + 1).toString();
  const matches = /\/ByteRange \[(\d+) +(\d+) +(\d+) +(\d+) *\]/.exec(byteRange);
  if (matches == null) {
    return {
      ByteRange: [0],
      signature: "",
      signedData: import_buffer.Buffer.from([])
    };
  } else {
    const ByteRange = matches.slice(1).map(Number);
    const signedData = import_buffer.Buffer.concat([
      pdf.subarray(ByteRange[0], ByteRange[0] + ByteRange[1]),
      pdf.subarray(ByteRange[2], ByteRange[2] + ByteRange[3])
    ]);
    const signatureHex = pdf.subarray(ByteRange[0] + ByteRange[1] + 1, ByteRange[2]).toString("binary").replace(/(?:00|>)+$/, "");
    const signature = import_buffer.Buffer.from(signatureHex, "hex").toString("binary");
    return {
      ByteRange: matches.slice(1, 5).map(Number),
      signature,
      signedData
    };
  }
};
var getSubstringIndex = (str, substring, n) => {
  let times = 0;
  let index = 0;
  while (times < n && index !== -1) {
    index = str.indexOf(substring, index + 1);
    times += 1;
  }
  return index;
};
var uploadPdf = (e, setpdfStatus) => {
  return new Promise((resolve, reject) => {
    if (e.target.files) {
      try {
        const fileReader = new FileReader();
        fileReader.readAsBinaryString(e.target.files[0]);
        fileReader.onload = (e2) => {
          if (e2.target) {
            try {
              const { signature } = extractSignature(
                import_buffer.Buffer.from(e2.target.result, "binary")
              );
              if (signature != "") {
                resolve({
                  pdf: import_buffer.Buffer.from(e2.target.result, "binary")
                });
                setpdfStatus("Signature detected \u2705" /* SIGNATURE_PRESENT */);
              } else {
                setpdfStatus("Signature not detected in document \u274C" /* SIGNATURE_NOT_PRESENT */);
              }
            } catch (error) {
              setpdfStatus(".pdf document invalid \u274C" /* ERROR_PARSING_PDF */);
              reject(error);
            }
          }
        };
      } catch {
        setpdfStatus(null);
        reject();
      }
    }
  });
};

// src/components/PasswordInput.tsx
var import_styled_components5 = __toESM(require("styled-components"));
var import_jsx_runtime6 = require("react/jsx-runtime");
var PasswordInput = ({
  setPassword,
  id
}) => {
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
    InputPass,
    {
      type: "password",
      id,
      onChange: (e) => {
        setPassword(e.target.value);
      }
    }
  );
};
var InputPass = import_styled_components5.default.input`
  display: flex;
  align-items: center;
  width: 100%;
  border-radius: 0.5rem;
  border-width: 1px;
  border-color: #d1d5db;
  font-size: 18px;
  line-height: 1.75rem;
  color: #111827;
  background-color: #f9fafb;
  cursor: text;
  margin-top: 0.3rem;
  padding: 0.3rem;
`;

// src/components/ErrorToast.tsx
var import_react8 = require("react");
var import_styled_components6 = __toESM(require("styled-components"));
var import_jsx_runtime7 = require("react/jsx-runtime");
var ErrorToast = ({
  message,
  setErrorMessage
}) => {
  const [isVisible, setIsVisible] = (0, import_react8.useState)(false);
  (0, import_react8.useEffect)(() => {
    if (message)
      setIsVisible(true);
  }, [message]);
  const handleClose = () => {
    setIsVisible(false);
    setErrorMessage(null);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_jsx_runtime7.Fragment, { children: isVisible && /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Box, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Message, { children: message }),
    /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CloseButton, { onClick: handleClose })
  ] }) });
};
var Box = import_styled_components6.default.div`
  margin: 1rem;
  display: flex;
  position: absolute;
  width: 90%;
  border-radius: 5px;
  background-color: #efc8c8;
  padding: 4px;
  align-items: flex-start;
`;
var Message = import_styled_components6.default.div`
  text-align: left;
  margin-left: 3px;
  font-size: 0.875rem;
  color: #a00f0f;
  flex: 1;
  width: fit-content;
  max-width: 92%;
  overflow: hidden;
  text-overflow: ellipsis;
`;
var CloseButton = import_styled_components6.default.button`
  border: none;
  background: none;
  color: #a00f0f;
  cursor: pointer;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;

  &::before,
  &::after {
    content: '';
    position: absolute;
    width: 2px;
    height: 12px;
    background-color: currentColor;
  }

  &::before {
    transform: rotate(45deg);
  }

  &::after {
    transform: rotate(-45deg);
  }
`;

// src/components/ProveModal.tsx
var import_buffer2 = require("buffer");
var import_jsx_runtime8 = require("react/jsx-runtime");
var ProveModal = ({
  isOpen,
  onClose,
  errorMessage,
  setErrorMessage,
  logo,
  pdfStatus,
  setpdfStatus
}) => {
  const [pdfData, setPdfData] = (0, import_react9.useState)(import_buffer2.Buffer.from([]));
  const [password, setPassword] = (0, import_react9.useState)("");
  const [provingEnabled, setProvingEnabled] = (0, import_react9.useState)(false);
  const handlePdfChange = async (e) => {
    const { pdf } = await uploadPdf(e, setpdfStatus);
    setPdfData(pdf);
  };
  (0, import_react9.useEffect)(() => {
    if (pdfStatus === "Signature detected \u2705" /* SIGNATURE_PRESENT */ && password !== "") {
      setProvingEnabled(true);
    } else {
      setProvingEnabled(false);
    }
  }, [pdfStatus, password, pdfData]);
  return isOpen ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ModalOverlay, { onClick: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(ModalContent, { onClick: (e) => e.stopPropagation(), children: [
    errorMessage !== null && /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      ErrorToast,
      {
        message: errorMessage,
        setErrorMessage
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(TitleSection, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(Title, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Logo, { src: logo }),
        "Prove your Identity"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Disclaimer, { children: "Anon Aadhaar securely verifies your document by confirming its government signature. This process happens entirely on your device for privacy. Please note, slower internet speeds may affect verification time." })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(UploadSection, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(UploadFile, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Label, { children: "Upload your Masked Aadhaar PDF" }),
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(FileInput, { onChange: handlePdfChange, id: "handlePdfChange" }),
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(DocumentResult, { children: pdfStatus })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(UploadFile, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Label, { children: "Enter your Aadhaar PDF password" }),
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(PasswordInput, { setPassword, id: "password" })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      ProveButton,
      {
        pdfData,
        password,
        provingEnabled,
        setErrorMessage
      }
    )
  ] }) }) : null;
};
var ModalOverlay = import_styled_components7.default.div`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.2);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
`;
var ModalContent = import_styled_components7.default.div`
  position: fixed;
  display: flex;
  flex-direction: column;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: #ffffff;
  border-radius: 1rem;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  justify-content: space-between;

  @media (max-width: 425px) {
    /* For screens <= 425px (e.g., mobile devices) */
    width: 100%;
    height: 67%;
    max-width: 100%;
    max-height: 100%;
  }

  @media (min-width: 426px) {
    /* For screens > 426px (e.g., desktop) */
    min-height: 400px;
    max-width: 400px;
    width: 80%;
  }
`;
var UploadFile = import_styled_components7.default.div`
  margin-top: 30px;
  margin-bottom: 30px;
`;
var DocumentResult = import_styled_components7.default.div`
  color: #111827;
  position: absolute;
  font-size: 0.875rem;
  margin-top: 4px;
`;
var TitleSection = import_styled_components7.default.div`
  color: #111827;
  flex-shrink: 0;
  row-gap: 1rem;
  margin-left: auto;
  margin-right: auto;
  margin: 1rem 1rem 0;
  display: flex;
  flex-flow: column;
`;
var Title = import_styled_components7.default.h3`
  display: flex;
  flex-shrink: 0;
  margin-left: auto;
  margin-right: auto;
  font-size: medium;
  font-weight: bold;
`;
var Disclaimer = import_styled_components7.default.p`
  color: #6d6d6d;
  margin-top: 0.3rem;
  font-size: small;
  font-weight: normal;
`;
var UploadSection = import_styled_components7.default.div`
  margin: 0 1rem 0;
  row-gap: 1rem;
  max-width: 100%;
`;
var Label = import_styled_components7.default.div`
  font-size: medium;
  text-align: left;
  font-weight: 500;
  color: #111827;
`;

// src/components/LogInWithAnonAadhaar.tsx
var import_styled_components8 = __toESM(require("styled-components"));
var import_react11 = require("react");

// src/components/ButtonLogo.ts
var icon = '<svg xmlns="http://www.w3.org/2000/svg" width="173" height="173" fill="none"><path fill="#FD8B0E" d="M80.39.81v22.03c0 .45-.36.81-.81.81H31.52c-4.2 0-7.6 3.4-7.6 7.6V79.7c0 .45-.36.81-.81.81H.81c-.45 0-.81-.36-.81-.81V53.47c0-3.69 1.47-7.24 4.08-9.85l39.5-39.49c2.6-2.6 6.13-4.07 9.82-4.08L79.57 0c.45 0 .82.36.82.81"/><path fill="#081224" d="M91.85.81v22.03c0 .45.36.81.81.81h48.05c4.2 0 7.6 3.4 7.6 7.6V79.7c0 .45.36.81.81.81h22.29c.45 0 .81-.36.81-.81V53.47c0-3.69-1.47-7.24-4.08-9.85L128.66 4.13a13.94 13.94 0 0 0-9.82-4.08L92.67 0c-.45 0-.82.36-.82.81M80.39 171.56v-22.03c0-.45-.36-.81-.81-.81H31.52c-4.2 0-7.6-3.4-7.6-7.6V92.67c0-.45-.36-.81-.81-.81H.81c-.45 0-.81.36-.81.81v26.23c0 3.69 1.47 7.24 4.08 9.85l39.5 39.5c2.61 2.61 6.14 4.07 9.82 4.08l26.18.05c.45 0 .82-.36.82-.81z"/><path fill="#009A08" d="M91.85 171.56v-22.03c0-.45.36-.81.81-.81h48.05c4.2 0 7.6-3.4 7.6-7.6V92.67c0-.45.36-.81.81-.81h22.29c.45 0 .81.36.81.81v26.23c0 3.69-1.47 7.24-4.08 9.85l-39.5 39.5a13.934 13.934 0 0 1-9.82 4.08l-26.18.05c-.45 0-.82-.36-.82-.81z"/></svg>';

// src/components/LogInWithAnonAadhaar.tsx
var import_jsx_runtime9 = require("react/jsx-runtime");
var LogInWithAnonAadhaar = () => {
  const [isModalOpen, setIsModalOpen] = (0, import_react10.useState)(false);
  const [errorMessage, setErrorMessage] = (0, import_react10.useState)(null);
  const [pdfStatus, setpdfStatus] = (0, import_react10.useState)(null);
  const { state, startReq } = (0, import_react11.useContext)(AnonAadhaarContext);
  const blob = new Blob([icon], { type: "image/svg+xml" });
  const anonAadhaarLogo = (0, import_react10.useMemo)(() => URL.createObjectURL(blob), [icon]);
  (0, import_react11.useEffect)(() => {
    if (state.status === "logged-in")
      setIsModalOpen(false);
  }, [state]);
  const openModal = () => {
    setIsModalOpen(true);
  };
  const closeModal = () => {
    setIsModalOpen(false);
    setErrorMessage(null);
    setpdfStatus(null);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { children: [
    (state.status === "logged-out" || state.status === "logging-in") && /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(Btn2, { onClick: openModal, children: [
        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Logo, { src: anonAadhaarLogo }),
        "Login"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
        ProveModal,
        {
          isOpen: isModalOpen,
          onClose: closeModal,
          errorMessage,
          setErrorMessage,
          logo: anonAadhaarLogo,
          pdfStatus,
          setpdfStatus
        }
      )
    ] }),
    state.status === "logged-in" && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(Btn2, { onClick: () => startReq({ type: "logout" }), children: [
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Logo, { src: anonAadhaarLogo }),
      "Logout"
    ] }) })
  ] });
};
var Logo = import_styled_components8.default.img`
  height: 1.5rem;
  margin-right: 0.5rem;
`;
var Btn2 = import_styled_components8.default.button`
  display: flex;
  padding: 0 1rem;
  font-size: 1rem;
  cursor: pointer;
  color: #000000;
  font-weight: bold;
  border-radius: 1.3125rem;
  background: #fff;
  box-shadow: 0px 3px 8px 1px rgba(0, 0, 0, 0.25);
  border: none;
  min-height: 2.5rem;
  border-radius: 0.5rem;
  align-items: center;

  &:hover {
    background: #fafafa;
  }

  &:active {
    background: #f8f8f8;
  }

  &:disabled {
    color: #a8aaaf;
    background: #e8e8e8;
    cursor: default;
  }
`;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AnonAadhaarProof,
  AnonAadhaarProvider,
  LogInWithAnonAadhaar,
  useAnonAadhaar
});
